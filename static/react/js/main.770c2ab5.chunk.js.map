{"version":3,"sources":["Side/SideTab.js","Side/NavBar.js","Graph/Graph.js","App.js","index.js"],"names":["SideTab","this","props","open","id","className","onClick","closeSide","node","name","description","href","target","rel","React","Component","countries","require","getSuggestions","value","inputValue","trim","toLowerCase","inputLength","length","filter","country","slice","NavBar","onSubmit","e","console","log","keyCode","setSearchTerm","state","onChange","event","newValue","setState","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","getSuggestionValue","s","renderSuggestion","inputProps","placeholder","bind","onkeydown","Graph","fetchData","search","fetch","then","res","data","json","result","isLoaded","fgRef","createRef","selectedNode","hoverNode","visited","Set","highlightLinks","ref","graphData","searchTerm","enableNodeDrag","nodeLabel","nodeCanvasObject","ctx","globalScale","fontSize","Math","max","font","val","textAlign","textBaseline","fillStyle","has","fillText","x","y","onNodeHover","document","body","style","cursor","onNodeClick","setNode","openSide","links","link","source","add","current","centerAt","zoom","onBackgroundClick","linkWidth","cooldownTicks","onEngineStop","zoomToFit","App","ReactDOM","render","getElementById"],"mappings":"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","file":"js/main.770c2ab5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SideTab.css'\r\n\r\nexport class SideTab extends React.Component {   \r\n    render() {\r\n        if (!this.props.open) {\r\n            return null;\r\n        }\r\n        return (\r\n            <div id='SideTab'>\r\n                <button className='btn close-btn' onClick={this.props.closeSide}>&times;</button>\r\n                <h1 id='info-title'>{this.props.node.name}</h1>\r\n                <hr />\r\n                <p id='main-info'>{this.props.node.description}</p>\r\n                <p><a href={this.props.node.href} target='_blank' rel=\"noreferrer\" id='wiki-link'>Read More</a></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SideTab;","import React from 'react';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport './NavBar.css';\r\n\r\n\r\nconst countries = require('./countries.json');\r\n\r\nconst getSuggestions = value => { // GET RID OF THIS ONCE WE HAVE WIKI AUTOSUGGEST\r\n  const inputValue = value.trim().toLowerCase();\r\n  const inputLength = inputValue.length;\r\n\r\n  return inputLength === 0 ? [] : countries.filter(country =>\r\n    country.name.toLowerCase().slice(0, inputLength) === inputValue\r\n  );\r\n\r\n  // // SOME CODE FOR AUTOCOMPLETE SUGGESTIONS\r\n  // const url = 'http://en.wikipedia.org/w/api.php?action=opensearch&limit=10&format=json&callback=addSuggest';\r\n  // fetch(`${url}&search=${this.state.value}`)\r\n  //     .then(res => res.json())\r\n  //     .then(data => {\r\n  //         console.log(data);\r\n  //         this.setState({suggestions: data});\r\n  //     });\r\n\r\n};\r\n\r\n\r\nexport class NavBar extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      value: '',\r\n      suggestions: []\r\n    };\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    console.log(e)\r\n    if (e.keyCode == 'Enter') {\r\n      this.props.setSearchTerm(this.state.value)\r\n      console.log(this.state.value)\r\n    }\r\n  }\r\n\r\n  onChange = (event, { newValue }) => {\r\n    this.setState({\r\n      value: newValue\r\n    });\r\n  };\r\n\r\n  onSuggestionsFetchRequested = ({ value }) => {\r\n    this.setState({\r\n      suggestions: getSuggestions(value)\r\n    });\r\n  };\r\n\r\n  onSuggestionsClearRequested = () => {\r\n    this.setState({\r\n      suggestions: []\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { value, suggestions } = this.state;\r\n\r\n    return (\r\n      <Autosuggest\r\n        suggestions={suggestions}\r\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n        getSuggestionValue={s => s.name}\r\n        renderSuggestion={s => <div>{s.name}</div>}\r\n        inputProps={{\r\n          placeholder: 'Search',\r\n          value,\r\n          onChange: this.onChange.bind(this),\r\n          onkeydown: this.onSubmit\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  // <nav id='navbar' className='navbar'>\r\n  // <div style={{display: 'inline-block', width:'100%'}}>\r\n  //     <form method=\"GET\" id=\"query-form\" autoComplete='off'>\r\n  //         <div className='form-group mb-0'>\r\n  //             <label htmlFor='q' className='small text-muted mb-0'>Search</label>\r\n  //             <input list='suggest' className=\"form-control\" id='q' name='q' value={this.state.value} onChange={this.handleChange}/>\r\n  //             <ul id='suggest'></ul>\r\n  //         </div> \r\n  //     </form>\r\n  // </div>\r\n  // </nav>\r\n\r\n}\r\n\r\n\r\nexport default NavBar;","import React from 'react';\r\nimport ForceGraph2D from 'react-force-graph-2d';\r\n\r\nexport class Graph extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.fgRef = React.createRef();\r\n        this.state = {\r\n            selectedNode: \"\",\r\n            hoverNode: \"\",\r\n            visited: new Set(),\r\n            highlightLinks: new Set(),\r\n            data: {},\r\n            isLoaded: false\r\n        }\r\n    }\r\n\r\n    fetchData = (search) => {\r\n        fetch(\"/see?search=\" + search)\r\n            .then(res => console.log(res.data))\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        data: result.data\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ForceGraph2D\r\n                ref={this.fgRef}\r\n                graphData={this.fetchData(this.props.searchTerm)}\r\n                enableNodeDrag={false}\r\n                nodeLabel='href'\r\n                nodeCanvasObject={(node, ctx, globalScale) => {\r\n                    const fontSize = Math.max((node.value * 300) / globalScale, 2); // this formula has to change with the \r\n\r\n                    ctx.font = `${fontSize}px Times-new-roman`;\r\n                    node.val = fontSize;\r\n\r\n                    ctx.textAlign = 'center';\r\n                    ctx.textBaseline = 'middle';\r\n\r\n                    if (this.props.node && this.props.node.id === node.id) { // probably a way to optimize this control flow...\r\n                        ctx.fillStyle = '#0000FF';\r\n                    } else if (this.state.hoverNode === node) {\r\n                        ctx.fillStyle = '#751F80';\r\n                    } else if (this.state.visited.has(node.id)) {\r\n                        ctx.fillStyle = '#751F80';\r\n                    } else {\r\n                        ctx.fillStyle = '#0645BD'\r\n                    }\r\n\r\n                    ctx.fillText(node.name, node.x, node.y);\r\n                }\r\n                }\r\n                onNodeHover={node => {\r\n                    if (node) {\r\n                        document.body.style.cursor = 'pointer';\r\n                        this.setState({ hoverNode: node });\r\n                    } else {\r\n                        document.body.style.cursor = 'default';\r\n                        this.setState({ hoverNode: null });\r\n                    }\r\n                }}\r\n                onNodeClick={node => { // FIX THIS REACT\r\n                    if (node) {\r\n                        this.props.setNode(node);\r\n                        this.props.openSide();\r\n\r\n                        let highlightLinks = new Set();\r\n                        for (var link of this.props.data.links) { // there must be a way to optimize this\r\n                            if (link.source.id === node.id || link.target.id === node.id) {\r\n                                highlightLinks.add(link);\r\n                            }\r\n                        }\r\n                        this.setState({ highlightLinks: highlightLinks });\r\n                        this.setState({ visited: this.state.visited.add(node.id) })\r\n                        this.fgRef.current.centerAt(node.x - 40, node.y, 1000); // Change node.x to something to do with screen width\r\n                        this.fgRef.current.zoom(5, 2000);\r\n                    }\r\n                }}\r\n                onBackgroundClick={() => {\r\n                    this.setState({ highlightLinks: new Set() });\r\n                }}\r\n                linkWidth={\r\n                    link =>\r\n                        this.state.highlightLinks.has(link) ? 5 : 1\r\n                }\r\n                cooldownTicks={50}\r\n                onEngineStop={() => this.fgRef.current.zoomToFit(400)}\r\n            />\r\n        );\r\n    }\r\n};\r\n\r\nexport default Graph;","import React from 'react';\r\nimport { SideTab } from './Side/SideTab.js';\r\nimport { NavBar } from './Side/NavBar.js';\r\nimport { Graph } from './Graph/Graph.js';\r\nimport './App.css';\r\n\r\nexport class App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n            node: null,\r\n            searchTerm: \"\"\r\n        }\r\n\r\n        this.openSide = this.openSide.bind(this);\r\n        this.closeSide = this.closeSide.bind(this);\r\n        this.setNode = this.setNode.bind(this);\r\n    }\r\n\r\n    openSide() {\r\n        this.setState({ open: true });\r\n    }\r\n\r\n    closeSide() {\r\n        this.setState({ open: false });\r\n    }\r\n\r\n    setNode(node) {\r\n        this.setState({ node: node });\r\n    }\r\n\r\n    setSearchTerm = (searchTerm) => {\r\n        this.setState({ searchTerm })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='row'>\r\n                {/* <p>Flask Token = {window.token}</p> */}\r\n                <div className='col-md-4' id=\"sidebar\">\r\n                    <NavBar />\r\n                    <SideTab open={this.state.open} closeSide={this.closeSide} node={this.state.node} />\r\n                </div>\r\n                <div className='col-lg' id=\"graph\">\r\n                    <Graph searchTerm={this.state.searchTerm} node={this.state.node} setNode={this.setNode} openSide={this.openSide} closeSide={this.closeSide} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App.js';\n\n// const data = require('./Renaissance.json'); // needs to be dynamically fetched from server\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}